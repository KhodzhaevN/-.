{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f0521421",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8522f68b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tkinter as tk\n",
    "from tkinter import messagebox, filedialog\n",
    "import time\n",
    "import threading\n",
    "\n",
    "def сортировка_пузырьком(nums):\n",
    "    \"\"\"Функция сортировки пузырьком.\"\"\"\n",
    "    n = len(nums)\n",
    "    for i in range(n):\n",
    "        for j in range(0, n - i - 1):\n",
    "            if nums[j] > nums[j + 1]:\n",
    "                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n",
    "\n",
    "class ПриложениеСортировки:\n",
    "    def __init__(self, root):\n",
    "        self.root = root\n",
    "        self.root.title(\"Сортировка чисел\")\n",
    "\n",
    "        # Переменные для ввода, списка и вывода\n",
    "        self.input_entry = tk.Entry(root, font=('Arial', 12))\n",
    "        self.sort_option = tk.StringVar(root)\n",
    "        self.sort_option.set(\"Сортировка пузырьком\")  # По умолчанию выбрана сортировка пузырьком\n",
    "        self.direction_option = tk.StringVar(root)\n",
    "        self.direction_option.set(\"По возрастанию\")  # По умолчанию выбрано по возрастанию\n",
    "        self.output_label = tk.Label(root, text=\"Отсортированная последовательность:\", font=('Arial', 12, 'bold'))\n",
    "        self.time_label = tk.Label(root, text=\"Время сортировки:\", font=('Arial', 12, 'bold'))\n",
    "        self.output_text = tk.Text(root, height=10, width=30, font=('Arial', 12), state=tk.DISABLED)\n",
    "\n",
    "        # Создание выпадающих списков\n",
    "        self.sort_options = [\"Сортировка пузырьком\", \"Быстрая сортировка\", \"Сортировка слиянием\"]\n",
    "        self.sort_dropdown = tk.OptionMenu(root, self.sort_option, *self.sort_options)\n",
    "        self.sort_dropdown.config(font=('Arial', 12))\n",
    "\n",
    "        self.direction_options = [\"По возрастанию\", \"По убыванию\"]\n",
    "        self.direction_dropdown = tk.OptionMenu(root, self.direction_option, *self.direction_options)\n",
    "        self.direction_dropdown.config(font=('Arial', 12))\n",
    "\n",
    "        # Кнопки и привязки к функциям\n",
    "        self.start_button = tk.Button(root, text=\"Старт\", command=self.начать_сортировку, font=('Arial', 12, 'bold'))\n",
    "        self.save_button = tk.Button(root, text=\"Сохранить\", command=self.сохранить_в_файл, font=('Arial', 12, 'bold'))\n",
    "\n",
    "        # Расположение элементов на экране\n",
    "        self.input_entry.pack(pady=10)\n",
    "        self.sort_dropdown.pack(pady=5)\n",
    "        self.direction_dropdown.pack(pady=5)\n",
    "        self.start_button.pack(pady=10)\n",
    "        self.save_button.pack(pady=5)\n",
    "        self.output_label.pack()\n",
    "        self.output_text.pack(pady=10)\n",
    "        self.time_label.pack()\n",
    "\n",
    "        # Показываем подсказку при наведении курсора на кнопку \"Старт\"\n",
    "        self.start_button.tooltip = tk.Label(root, text=\"Нажмите для начала сортировки\", font=('Arial', 10))\n",
    "        self.start_button.tooltip.place_forget()  # Начинаем с скрытой подсказки\n",
    "        self.start_button.bind(\"<Enter>\", self.show_tooltip)\n",
    "        self.start_button.bind(\"<Leave>\", self.hide_tooltip)\n",
    "\n",
    "    def начать_сортировку(self):\n",
    "        # Получение введенной последовательности и выбранных опций\n",
    "        sequence_str = self.input_entry.get()\n",
    "        sort_method = self.sort_option.get()\n",
    "        direction = self.direction_option.get()\n",
    "\n",
    "        try:\n",
    "            # Преобразование строки в список чисел\n",
    "            nums = [int(num.strip()) for num in sequence_str.split(\",\")]\n",
    "\n",
    "            # Засекаем время начала сортировки\n",
    "            start_time = time.time()\n",
    "\n",
    "            # Выполняем сортировку\n",
    "            if direction == \"По возрастанию\":\n",
    "                сортировка_пузырьком(nums)\n",
    "            elif direction == \"По убыванию\":\n",
    "                сортировка_пузырьком(nums)\n",
    "                nums.reverse()\n",
    "\n",
    "            # Рассчитываем время, затраченное на сортировку\n",
    "            elapsed_time = time.time() - start_time\n",
    "\n",
    "            # Обновляем текстовое поле вывода\n",
    "            sorted_sequence_str = \", \".join(map(str, nums))\n",
    "            result_str = f\"Отсортированная последовательность: {sorted_sequence_str}\"\n",
    "            self.output_text.config(state=tk.NORMAL)  # Разрешаем редактирование текстового поля\n",
    "            self.output_text.delete(1.0, tk.END)  # Очищаем предыдущий вывод\n",
    "            self.output_text.insert(tk.END, result_str)  # Вставляем новый вывод\n",
    "            self.output_text.config(state=tk.DISABLED)  # Запрещаем редактирование текстового поля\n",
    "\n",
    "            # Выводим время затраченное на сортировку\n",
    "            self.time_label.config(text=f\"Время сортировки: {elapsed_time:.6f} секунд\")\n",
    "\n",
    "        except ValueError:\n",
    "            messagebox.showerror(\"Ошибка\", \"Неверный ввод. Пожалуйста, введите допустимую последовательность чисел.\")\n",
    "\n",
    "    def сохранить_в_файл(self):\n",
    "        # Получение отсортированной последовательности\n",
    "        sorted_sequence = self.output_text.get(\"1.0\", tk.END)\n",
    "\n",
    "        # Отображение диалогового окна для выбора файла для сохранения\n",
    "        file_path = tk.filedialog.asksaveasfilename(defaultextension=\".txt\", filetypes=[(\"Текстовые файлы\", \"*.txt\")])\n",
    "\n",
    "        if file_path:\n",
    "            try:\n",
    "                # Запись отсортированной последовательности в файл\n",
    "                with open(file_path, 'w') as file:\n",
    "                    file.write(sorted_sequence)\n",
    "                messagebox.showinfo(\"Успех\", f\"Отсортированная последовательность сохранена в файл: {file_path}\")\n",
    "\n",
    "            except Exception as e:\n",
    "                messagebox.showerror(\"Ошибка\", f\"Произошла ошибка при сохранении файла: {str(e)}\")\n",
    "\n",
    "    def show_tooltip(self, event):\n",
    "        self.start_button.tooltip.place(relx=0.5, rely=1.5, anchor='s')  # Отображаем подсказку\n",
    "\n",
    "    def hide_tooltip(self, event):\n",
    "        self.start_button.tooltip.place_forget()  # Скрываем подсказку\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    root = tk.Tk()\n",
    "    app = ПриложениеСортировки(root)\n",
    "    root.mainloop()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aeac7295",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
